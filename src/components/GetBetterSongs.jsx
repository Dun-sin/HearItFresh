import React, { useEffect, useRef, useState } from 'react'

import { Configuration, OpenAIApi } from 'openai'
import { Icon } from '@iconify/react';

import { spotifyApi } from '../App';

const configuration = new Configuration({
  apiKey: import.meta.env.VITE_API_KEY
});

const openai = new OpenAIApi(configuration);

const GetBetterSongs = ({ isConnected, logOut }) => {
  const [isLoading, setIsLoading] = useState(false)
  const [playListLink, setPlayListLink] = useState(null)
  const [buttonClick, setButtonClicked] = useState(false)

  const spotifyPlaylist = useRef(null)
  const artistName = useRef(null)

  useEffect(() => {
    if (!isLoading) {
      spotifyPlaylist.current.disabled = false
      artistName.current.disabled = false
    } else {
      spotifyPlaylist.current.disabled = true
      artistName.current.disabled = true
    }
  }, [isLoading])

  useEffect(() => {
    !isConnected && setIsLoading(false)
  }, [isConnected])


  const copyToClipboard = async () => {
    if ('clipboard' in navigator) {
      return await navigator.clipboard.writeText(playListLink);
    } else {
      return document.execCommand('copy', true, playListLink);
    }
  }

  const getSimilarArtists = async (artists) => {
    setIsLoading(true)
    try {
      const response = await openai.createCompletion({
        model: "text-davinci-003",
        prompt: `Name 10 musicians similar in genre and music style to the following artist ${artists.slice(0, -1).join(', ') + ' and ' + artists.slice(-1)} seperated by a comma, but don't include ${artists.slice(0, -1).join(', ') + ' or ' + artists.slice(-1)}`,
        max_tokens: 1024,
        temperature: 1,
        top_p: 1,
        frequency_penalty: 0,
        presence_penalty: 0,
      });

      const artistList = response.data.choices[0].text.split(", ");

      const getArtistTopTracksPromises = artistList.map(getArtistTopTracks);
      const tracks = await Promise.all(getArtistTopTracksPromises);

      const nonEmptyTracks = tracks.flat().filter(Boolean);
      const { id, link } = await Promise.resolve(createPlayList())

      const playListID = id.substring("spotify:playlist:".length)
      addTracksToPlayList(nonEmptyTracks, playListID)
        .then(data => setPlayListLink(link))
        .catch(err => {
          console.log(err)
        })

      setIsLoading(false)
      setTimeout(() => {
        logOut()
      }, 60000)
    } catch (err) {
      console.log(err)
      setTimeout(() => {
        logOut()
      }, 60000)
    }
  }

  const onInputFocus = (e) => {
    e.target.name === 'artistName' && (spotifyPlaylist.current.value = '')
    e.target.name === 'spotifyPlaylist' && (artistName.current.value = '')
  }

  const handleButton = () => {
    const artistNameValue = artistName.current.value;
    const spotifyPlayListValue = spotifyPlaylist.current.value;
    if (artistNameValue === '' && spotifyPlayListValue === '') return
    artistName.current.value === '' && handleIfItsAPlaylistLink(spotifyPlayListValue)
    spotifyPlaylist.current.value === '' && handleIfItsAListOfArtist(artistNameValue)
    setButtonClicked(true)
  }

  async function handleIfItsAPlaylistLink(link) {
    link = link.trim();
    if (!link.includes('https://open.spotify.com/playlist/')) return

    if (link.includes('?')) {
      link = link.substring(link.lastIndexOf('/') + 1, link.indexOf('?'));
    } else {
      link = link.substring(link.lastIndexOf('/') + 1)
    }

    const playlistTracks = await Promise.resolve(getAllTracksInAPlaylist(link));
    const trackArtists = playlistTracks.flat().map(item => item.track.artists);
    const artistNames = trackArtists.flat().map(item => item.name);
    const uniqueArtistNames = [... new Set(artistNames)];


    getSimilarArtists(uniqueArtistNames)
  }

  function handleIfItsAListOfArtist(artists) {
    artists = artists.trim()
    if (!artists.includes(',')) return

    const array = artists.split(',')
    getSimilarArtists(array)
  }

  async function getArtistTopTracks(artist) {
    try {
      spotifyApi.track
      const result = [];
      const data = await spotifyApi.searchArtists(artist, { limit: 1, offset: 0 });
      const _data = await spotifyApi.getArtistTopTracks(data.body.artists.items[0].id, 'US');
      _data.body.tracks.forEach(song => result.push(song.uri))
      return result
    } catch (err) {
      return err
    }

  }

  async function createPlayList() {
    try {
      const data = await spotifyApi.createPlaylist('PlayList Generated By HearItFresh', { 'description': 'Listen To Something New', 'public': true });
      return { id: data.body.uri, link: data.body.external_urls.spotify }
    } catch (err) {
      return err
    }
  }

  async function addTracksToPlayList(tracks, playListID) {
    try {
      const _data = await spotifyApi.addTracksToPlaylist(playListID, tracks)
      return _data
    } catch (err) {
      return err
    }
  }

  async function getAllTracksInAPlaylist(link) {
    try {
      const data = await spotifyApi.getPlaylistTracks(link)
      return data.body.items
    } catch (err) {
      return err
    }
  }

  return (
    <div className='p-4 flex flex-col gap-10 items-center justify-center'>
      <section className='flex flex-col items-center'>
        <label htmlFor="artistName" className='md:min-w-[40vw] md:max-w-[50%] min-w-[300px] block mb-1'>
          <h3>Give Me Your Favourite Artists <span className='opacity-60'>(at least 2)</span></h3>
          <input type="text" placeholder='Seperated By a Comma e.g BTS, Travis Scott, Drake' name='artistName' className='w-full h-10 rounded p-2 outline-none border-2 focus:border-brand' onFocus={onInputFocus} ref={artistName} />
        </label>

        <p className='my-2'>OR</p>

        <label htmlFor="spotifyPlaylist" className='md:min-w-[40vw] md:max-w-[50%] min-w-[300px] block mb-1'>
          <h3>Paste a Spotify Playlist</h3>
          <input type="text" placeholder='e.g https://open.spotify.com/playlist/1B2CSnhZXXVC6xQcY3R4Fk' name='spotifyPlaylist' className='w-full h-10 rounded p-2 outline-none border-2 focus:border-brand' onFocus={onInputFocus} ref={spotifyPlaylist} />
        </label>

        {isLoading ?
          'Please Wait For the Result' :
          isConnected ?
            <button onClick={handleButton} className={`bg-brand text-white p-2 rounded mt-4 ${buttonClick && 'hidden'}`}>Get Fresh Songs</button>
            :
            <p>Please Connect Your Spotify</p>}

      </section>

      {!isLoading && <section className='bg-gray-200 md:min-w-[40vw] md:max-w-[50%] min-w-[300px] p-4 rounded'>
        {playListLink !== null
          &&
          <>
            <div className='text-base flex justify-between items-center mb-1'>
              <div>
                <p>Check Your Account For The Playlist Or Click On</p>
                <p>The Playlist link:</p>
              </div>
              {
                (playListLink.length !== 0)
                &&
                <Icon icon="pajamas:copy-to-clipboard" height='18' width='18' color="teal" inline={true} className='cursor-pointer' onClick={copyToClipboard} />}
            </div>
            {
              !(playListLink.length === 0)
                ?
                <a href={playListLink} target="_blank" rel='norefferer' className='underline text-brand whitespace-normal'>{playListLink}</a>
                :
                <p>Ooops! Something Went Wrong</p>
            }
          </>
        }

      </section>}
    </div>
  )
}

export default GetBetterSongs
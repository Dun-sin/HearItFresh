import React, { useEffect, useRef, useState, useMemo } from 'react'
import SpotifyWebApi from 'spotify-web-api-node'

import { Configuration, OpenAIApi } from 'openai'

const GetBetterSongs = () => {
  const [isConnected, setIsConnected] = useState(false)

  const [similarArtists, setSimilarArtists] = useState([]);
  const [newTracks, setNewTracks] = useState([])
  const [isLoading, setIsLoading] = useState(false)
  const [newPlayListLink, setNewPlayListLink] = useState('')
  const [spotifyPlaylistURi, setSpotifyPlaylistUri] = useState({
    id: '',
    url: ''
  })
  const [elaspedTimeForAccessToken, setElaspedTimeForAccessToken] = useState(NaN);

  const spotifyPlaylist = useRef(null)
  const artistName = useRef(null)

  const spotifyApi = new SpotifyWebApi({
    clientId: import.meta.env.VITE_SPOTIFY_CLIENT_ID,
    clientSecret: import.meta.env.VITE_SPOTIFY_CLIENT_SECRET,
    redirectUri: import.meta.env.VITE_REDIRECT_URL,
    refreshToken: import.meta.env.VITE_SPOTIFY_REFRESH_TOKEN
  })

  const configuration = new Configuration({
    apiKey: import.meta.env.VITE_API_KEY
  });

  const openai = new OpenAIApi(configuration);

  useEffect(() => {
    if (!isLoading) {
      spotifyPlaylist.current.disabled = false
      artistName.current.disabled = false
    }
  }, [isLoading])

  useEffect(() => {
    const hash = window.location.hash;
    let tokenSet = window.localStorage.getItem('token');

    if (!tokenSet && hash) {
      setElaspedTimeForAccessToken(Date.now() / 1000)
      tokenSet = hash
        .substring(1)
        .split('&')
        .find((elem) => elem.startsWith('access_token'))
        .split('=')[1];

      window.location.hash = '';
      window.localStorage.setItem('token', tokenSet);
    }

    if (tokenSet === undefined || tokenSet === '' || tokenSet === null) return;
    spotifyApi.setAccessToken(tokenSet);
    setIsConnected(true);
  }, []);

  useEffect(() => {
    if (similarArtists.length === 0) return;
    const result = [];

    async function searchSimilarArtists() {
      for (const artist of similarArtists) {
        const data = await spotifyApi.searchArtists(artist, { limit: 10, offset: 1 });
        const _data = await spotifyApi.getArtistTopTracks(data.body.artists.items[0].id, 'GB');
        _data.body.tracks.forEach(song => {
          result.push(song.uri)
        });
      }
    }

    searchSimilarArtists()
    setNewTracks(result);
  }, [similarArtists])

  useEffect(() => {
    if (newTracks.length === 0) return
    console.log(newTracks)
    async function createPlayList() {
      try {
        const data = await spotifyApi.createPlaylist('PlayList Generated By HearItFresh', { 'description': 'Listen To Something New', 'public': true });
        setSpotifyPlaylistUri({
          id: data.body.uri,
          url: data.body.external_urls.spotify
        });
        console.log('Created Successfully', data.body.name);
      } catch (err) {
        console.log(err);
      }
    }
    createPlayList()
  }, [newTracks])

  useEffect(() => {
    async function addTracks() {
      if (spotifyPlaylistURi.id.length === 0) return
      try {
        const _data = await spotifyApi.addTracksToPlaylist(spotifyPlaylistURi.id, newTracks)
        if (_data.statusCode === 200 || _data.statusCode === 201) {
          setNewPlayListLink(spotifyPlaylistURi.url)
          console.log('Added Successfully')
        }
      } catch (err) {
        console.log(err)
      }
    }

    addTracks()
  }, [spotifyPlaylistURi])

  useEffect(() => {
    const interval = setInterval(() => {
      const currentTime = Date.now() / 1000
      const timeLeft = currentTime - elaspedTimeForAccessToken
      if (timeLeft >= 3600) {
        refreshAccessToken();
      }
    }, 1000);
    return () => clearInterval(interval);
  }, [elaspedTimeForAccessToken]);


  const getSimilarArtists = async (artists) => {
    setIsLoading(true)
    spotifyPlaylist.current.disabled = true
    artistName.current.disabled = true

    const response = await openai.createCompletion({
      model: "text-davinci-003",
      prompt: `Name 10 similar musicians to ${artists.slice(0, -1).join(', ') + ' and ' + artists.slice(-1)} seperated by a comma, but don't include ${artists.slice(0, -1).join(', ') + ' or ' + artists.slice(-1)}`,
      max_tokens: 1024,
      temperature: 1,
      top_p: 1,
      frequency_penalty: 0,
      presence_penalty: 0,
    });
    setSimilarArtists(response.data.choices[0].text.replace(/\n\n|\./g, "").split(", "));
    setIsLoading(false)
  }

  const onInputFocus = (e) => {
    e.target.name === 'artistName' && (spotifyPlaylist.current.value = '')
    e.target.name === 'spotifyPlaylist' && (artistName.current.value = '')
  }

  const handleButton = () => {
    const artistNameValue = artistName.current.value;
    const spotifyPlayListValue = spotifyPlaylist.current.value;
    if (artistNameValue === '' && spotifyPlayListValue === '') return

    artistName.current.value === '' && handleIfItsAPlaylistLink(spotifyPlayListValue)
    spotifyPlaylist.current.value === '' && handleIfItsAListOfArtist(artistNameValue)
  }

  function handleIfItsAPlaylistLink() {
    console.log('you sent a playlist')
  }

  function handleIfItsAListOfArtist(artists) {
    artists = artists.trim()
    if (!artists.includes(',')) return

    const array = artists.split(',')
    getSimilarArtists(array)
  }

  function refreshAccessToken() {
    spotifyApi.refreshAccessToken()
      .then(data => {
        spotifyApi.setAccessToken(data.body['access_token']);
      })
      .catch(err => {
        console.log('Error refreshing access token:', err);
      });
  };
  return (
    <div className='h-[85%] p-4 flex flex-col gap-4 items-center justify-center'>
      {!isConnected && <a href={`https://accounts.spotify.com/authorize?response_type=token&client_id=${import.meta.env.VITE_SPOTIFY_CLIENT_ID}&scope=user-top-read%20playlist-modify-public%20playlist-modify-private%20playlist-read-private%20playlist-read-collaborative%20user-follow-modify%20user-library-modify%20user-library-read%20user-read-private&redirect_uri=${import.meta.env.VITE_REDIRECT_URL}`} className='bg-brand md:min-w-[40vw] md:max-w-[50%] min-w-[300px] flex items-center justify-center rounded text-white h-10 block'>Connect Your Spotify</a>}
      <section className='flex flex-col gap-2 items-center'>
        <label htmlFor="artistName" className='md:min-w-[40vw] md:max-w-[50%] min-w-[300px] block mb-1'>
          <h3>Give Me Your Favourite Artists <span className='opacity-60'>(at least 2)</span></h3>
          <input type="text" placeholder='Seperated By a Comma e.g BTS, Travis Scott, Drake' name='artistName' className='w-full h-10 rounded p-2 outline-none border-2 focus:border-brand' onFocus={onInputFocus} ref={artistName} />
        </label>

        <p className='my-2'>OR</p>

        <label htmlFor="spotifyPlaylist" className='md:min-w-[40vw] md:max-w-[50%] min-w-[300px] block mb-1'>
          <h3>Paste a Spotify Playlist</h3>
          <input type="text" placeholder='e.g https://open.spotify.com/playlist/1B2CSnhZXXVC6xQcY3R4Fk' name='spotifyPlaylist' className='w-full h-10 rounded p-2 outline-none border-2 focus:border-brand' onFocus={onInputFocus} ref={spotifyPlaylist} />
        </label>

        {isLoading ? 'Please Wait For the Result' : <button onClick={handleButton} className='bg-brand text-white p-2 rounded'>Get Fresh Songs</button>}

      </section>

      {similarArtists.length !== 0 && <section className='bg-gray-200 md:min-w-[40vw] md:max-w-[50%] min-w-[300px] p-4 rounded'>
        <p className='text-base'>Your Playlist link:</p>
        {!(newPlayListLink.length === 0) ? <p>{newPlayListLink}</p> : <p>Ooops! Something Went Wrong</p>}
      </section>}
    </div>
  )
}

export default GetBetterSongs
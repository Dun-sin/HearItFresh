import { spotifyApi } from "../src/App"

export async function getAllTracksInAPlaylist(link) {
  try {
    const data = await spotifyApi.getPlaylistTracks(link)
    return data.body.items
  } catch (err) {
    return err
  }
}

export async function getArtistTopTracks(artist) {
  try {
    const result = [];
    const data = await spotifyApi.searchArtists(artist, { limit: 1, offset: 0 });
    const _data = await spotifyApi.getArtistTopTracks(data.body.artists.items[0].id, 'US');
    _data.body.tracks.forEach(song => result.push(song.uri))
    return result
  } catch (err) {

    return err
  }

}

export async function createPlayList(artists) {
  try {
    const data = await spotifyApi.createPlaylist('PlayList Generated By HearItFresh', { 'description': `Listen To Something New From ${artists}`, 'public': true });
    return {
      id: data.body.uri,
      link: data.body.external_urls.spotify,
      name: data.body.name,
    }
  } catch (err) {
    return err
  }
}

export async function addTracksToPlayList(tracks, playListID) {
  try {
    const _data = await spotifyApi.addTracksToPlaylist(playListID, tracks)
    return _data
  } catch (err) {
    return err
  }
}

export async function getFiveArtistsAlbums(artist) {
  try {
    const _data = await spotifyApi.searchArtists(artist, { limit: 1, offset: 0 });
    const data = await spotifyApi.getArtistAlbums(_data.body.artists.items[0].id, { limit: 10, album_type: 'album', include_groups: 'album'})
    const removeRemixes = data.body.items.filter(album => !album.name.toLowerCase().includes('remix'))
    
    const result = removeRemixes.filter((album, index, self) => {
      return index === self.findIndex(a => a.name === album.name || a.uri === album.uri);
    });
    if (result.length > 5) { 
      const sortedAlbum = result.sort(() => Math.random() - 0.5)
      const randomlySelectedAlbum = sortedAlbum.slice(0, 5).map(item => item.id)
      return randomlySelectedAlbum
    } else {
      return result.map(item => item.id)
    }
  } catch(err) {
    return err
  }
}

export async function getTwoAlbumTracks(album) {
  try {
    const data = await spotifyApi.getAlbumTracks(album, {limit: 6, offset: 0})
    const result = data.body.items

    if (result.length > 2) {
      const sortedTracks = result.sort(() => Math.random() - 0.5)
      const randomlySelectedTracks = sortedTracks.slice(0, 2).map(item => item)
      return randomlySelectedTracks
    } else {
      return result.map(item => item)
    }
  } catch(err) {
    return err
  }
}